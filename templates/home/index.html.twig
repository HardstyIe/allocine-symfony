{% extends 'base.html.twig' %}
  
{% block title %}Accueil{% endblock %}
  
  {% block body %}
    {% if app.user %}
    
    
    {{ include('home/search.html.twig') }}
  </form>

    <div>
      <h1>Liste des Films</h1>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Titre</th>
                <th>Année</th>
                <th>Réalisateur</th>
                <th>Catégorie</th>
                <th>Acteurs</th>
                <th>actions</th>
            </tr>
        </thead>
        <tbody>
        {% for movie in movies %}
            <tr>
                <td>{{ movie.id }}</td>
                <td>{{ movie.title }}</td>
                <td>{{ movie.releaseYear | date('d/m/Y') }}</td>
                <td>{{ movie.realisators | join(', ') }}</td>
                <td>{{ movie.categories | join(', ') }}</td>
                <td>{{ movie.actors | join(', ') }}<td>
                    <a href="{{ path('app_movie_show', {'id': movie.id}) }}">Voir</a>
                    <a href="{{ path('app_movie_edit', {'id': movie.id}) }}">Modifiez</a>
                </td>
            </tr>
        {% else %}
            <tr>
                <td colspan="5">Pas de Films trouvé</td>
            </tr>
        {% endfor %}
        </tbody>

    </table>

    <a href="{{ path('app_movie_new') }}">Enregistez un nouveau Film</a>
    

    </div>

<!-- Exemple de code JavaScript dans votre vue Twig -->
<script>
    // Fonction pour effectuer la requête AJAX et afficher les résultats
    function performSearch() {
        const query = document.getElementById('searchQuery').value;
        const actorIds = getSelectedIds('selectedActors');
        const realisatorIds = getSelectedIds('selectedRealisators');
        const categoryIds = getSelectedIds('selectedCategories');

        // Effectuer la requête AJAX vers l'URL de recherche définie dans votre contrôleur
        fetch(`/movies/search?query=${query}&actorIds=${actorIds}&realisatorIds=${realisatorIds}&categoryIds=${categoryIds}`)
            .then(response => response.json())
            .then(data => {
                // Traiter les données JSON reçues et afficher les résultats sur la page
                const resultsContainer = document.getElementById('resultsContainer');
                resultsContainer.innerHTML = '';

                data.forEach(movie => {
                    const movieElement = document.createElement('div');
                    movieElement.textContent = `${movie.title} (${movie.releaseYear})`;
                    resultsContainer.appendChild(movieElement);
                });
            });
    }

    // Fonction pour obtenir les IDs des éléments sélectionnés dans une liste déroulante
    function getSelectedIds(listId) {
        const selectedIds = Array.from(document.querySelectorAll(`#${listId} option:checked`))
            .map(option => option.value)
            .join(',');
        return selectedIds;
    }

    // Écouter l'événement de soumission du formulaire de recherche
    document.getElementById('searchForm').addEventListener('submit', event => {
        event.preventDefault();
        performSearch();
    });

    // Appeler la fonction de recherche initiale au chargement de la page
    performSearch();
</script>
  
      {% else %}
      <div class="text-center">
          <a href="{{ path('app_login') }}">Connectez-vous</a> ou <a href="{{ path('app_register') }}">Inscrivez-vous</a>
      </div>


{% endif %}

{% endblock %}
